// Generated by CoffeeScript 1.9.1
describe('C2', function() {
  describe('#setup', function() {
    it("checks for c2", function() {
      var c2;
      c2 = new C2();
      return expect(c2 instanceof C2).to.eql(true);
    });
    it("checks for each constructor", function() {
      var c2;
      c2 = new C2();
      expect(c2.attachmentCardController instanceof AttachmentCardController).to.eql(true);
      expect(c2.editMode instanceof EditStateController).to.eql(true);
      expect(c2.detailsRequestForm instanceof DetailsRequestForm).to.eql(true);
      expect(c2.formState instanceof DetailsRequestFormState).to.eql(true);
      expect(c2.actionBar instanceof ActionBar).to.eql(true);
      return expect(c2.detailsSave instanceof DetailsSave).to.eql(true);
    });
    it("check config passing test param actionBar", function() {
      var c2, test, testParam;
      test = "action-bar-test";
      testParam = {
        actionBar: test
      };
      c2 = new C2(testParam);
      return expect(c2.config.actionBar).to.eql(test);
    });
    it("check config passing test param editMode", function() {
      var c2, test, testParam;
      test = "edit-mode-test";
      testParam = {
        editMode: test
      };
      c2 = new C2(testParam);
      return expect(c2.config.editMode).to.eql(test);
    });
    it("check config passing test param attachmentCard", function() {
      var c2, test, testParam;
      test = "attachment-card-test";
      testParam = {
        attachmentCard: test
      };
      c2 = new C2(testParam);
      return expect(c2.config.attachmentCard).to.eql(test);
    });
    it("check config passing test param formState", function() {
      var c2, test, testParam;
      test = "form-state-test";
      testParam = {
        formState: test
      };
      c2 = new C2(testParam);
      return expect(c2.config.formState).to.eql(test);
    });
    return it("check config passing test param detailsSave", function() {
      var c2, test, testParam;
      test = "details-save-test";
      testParam = {
        detailsSave: test
      };
      c2 = new C2(testParam);
      return expect(c2.config.detailsSave).to.eql(test);
    });
  });
  describe('#events _checkFieldChange', function() {
    return it("change state to edit when field changes", function() {
      var c2, testParams;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      c2.editMode.stateTo('view');
      expect(c2.editMode.getState()).to.eql(false);
      c2.detailsRequestForm.el.trigger('form:changed');
      return expect(c2.editMode.getState()).to.eql(true);
    });
  });
  describe('#action-bar-click inits', function() {
    return it("event setup for action-bar-clicked:save trigger", function() {
      var c2, flag, state, testParams;
      flag = false;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      c2.editMode.stateTo('edit');
      state = c2.editMode.getState();
      c2.actionBar.el.on("action-bar-clicked:saved", function() {
        return flag = true;
      });
      c2.actionBar.el.trigger("action-bar-clicked:save");
      expect(state).to.eql(true);
      return expect(flag).to.eql(true);
    });
  });
  describe('#events _actionBarState', function() {
    it("editMode is on when state when edit-mode:on", function() {
      var c2, isEditMode, testParams;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      isEditMode = c2.actionBar.el.hasClass('edit-actions');
      expect(isEditMode).to.eql(false);
      c2.editMode.el.trigger('edit-mode:on');
      isEditMode = c2.actionBar.el.hasClass('edit-actions');
      return expect(isEditMode).to.eql(true);
    });
    return it("editMode is off when state when edit-mode:off", function() {
      var c2, isEditMode, testParams;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      c2.editMode.el.trigger('edit-mode:on');
      isEditMode = c2.actionBar.el.hasClass('edit-actions');
      expect(isEditMode).to.eql(true);
      c2.editMode.el.trigger('edit-mode:off');
      isEditMode = c2.actionBar.el.hasClass('edit-actions');
      return expect(isEditMode).to.eql(false);
    });
  });
  return describe('#events _actionBarSave', function() {
    it("action-bar-clicked:save is fired through action-bar-clicked:saved", function() {
      var c2, flag, testParams;
      flag = false;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      c2.actionBar.el.on('action-bar-clicked:saved', function() {
        return flag = true;
      });
      c2.actionBar.el.trigger('action-bar-clicked:save');
      return expect(flag).to.eql(true);
    });
    return it("action-bar-clicked:save is fired through details-form:save", function() {
      var c2, flag, testParams;
      flag = false;
      testParams = setupC2TestParams();
      c2 = new C2(testParams);
      c2.detailsSave.el.on('details-form:save', function() {
        return flag = true;
      });
      c2.detailsSave.el.trigger('details-form:save');
      return expect(flag).to.eql(true);
    });
  });
});
