- content_for :title, "NCR Request"
.container.content.m-request-form
  %h2
    National Capital Region
  %h3
    Purchase Card Approval Request

  %p
    %em
      * Indicates a required field

  = simple_form_for @client_data_instance, html: { multipart: true } do |f|
    = f.input :project_title
    = f.input :description
    = field_set_tag "Expense type / Program", class: 'expense-type required' do
      = expense_type_radio_button(f, 'BA60')
      = expense_type_radio_button(f, 'BA61')
      = f.input :emergency, disabled: @client_data_instance.persisted?, wrapper_html: { data: { filter_key: 'expense-type', filter_value: 'BA61' } }
      = expense_type_radio_button(f, 'BA80')
      = render partial: 'ba_80_fields', locals: {f: f}
    = f.input :building_number, input_html: { class: 'js-selectize required', data: { initial: JSON.generate(building_options) } }
    = f.association :ncr_organization,
      collection: Ncr::Organization.all,
      input_html: { class: "js-selectize", data: { initial: @client_data_instance.ncr_organization.try(:code_and_name) } },
      value_method: :id,
      label_method: :code_and_name,
      prompt: :translate
    = f.input :vendor,
      input_html: { class: "js-selectize required", data: { initial: JSON.generate(vendor_options(@client_data_instance.vendor)) } }
    = field_set_tag "Amount", class: 'required' do
      = f.input :amount, as: :currency, label_html: { class: 'sr-only' }, input_html: { data: popover_data_attrs('ncr_amount') }
      = f.input :not_to_exceed, as: :radio_buttons, collection: [['Exact', false], ['Not to exceed', true]], label: false
    = f.input :direct_pay
    = f.input :approving_official_email, collection: approver_options(@client_data_instance.ineligible_approvers), include_blank: true, disabled: @client_data_instance.proposal.approver_email_frozen?, prompt: :translate, input_html: { class: 'js-selectize required' }, required: true
    - if @client_data_instance.new_record?
      = render partial: 'attachments'
    - else
      = field_set_tag "Budget codes" do
        = f.input :cl_number
        = f.input :function_code
        = f.input :soc_code
    = f.submit class: "form-button"
    - if @client_data_instance.persisted?
      = link_to "Discard Changes", proposal_url(@client_data_instance.proposal)
